# -*- coding: utf-8 -*-
"""ds task 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ZH0suNO2o9usS32pLPyJ6g11ONxHUui

# LetsGrowMore Virtual Internship Program ( jan 2022)

# **Task name : Iris Flowers Classification ML Project || january 2022**

**Perform by : Tejas takalkar**


Dataset : http://archive.ics.uci.edu/ml/datasets/Iris

# **Importing Libraries**
"""

import numpy as np                   #For Scientific Calculation 
import pandas as pd                  #For Data Manipulation
import matplotlib.pyplot as plt      #For Data Visualization
import seaborn as sns

col_names =  ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'species']
df = pd.read_csv("/content/drive/MyDrive/IRIS.csv dataset ..")

df.head()

# displaying last 5 rows of the Dataset 
df.tail()

"""# Getting the Size of the Dataset"""

data_size = df.shape
print(f"Number of Rows : {data_size[0]}") 
print(f"Number of Columns : {data_size[1]}")

"""Data Wrangling

# Checking for Data types
"""

df.dtypes

"""# Checking for null values"""

df.info()

df.isnull().sum()

"""There are no null values present in the dataset. So, no need of dealing with null values.

# Describing Statistical measures of the data
"""

df.describe()

"""# Checking for Unique Species"""

unique_species = df['species'].unique()
unique_species = unique_species.tolist()
unique_species

"""There are three types of flowers present in the dataset. They are 'Iris-setosa', 'Iris-versicolor', 'Iris-virginica'.

# Checking Number of values for each Species
"""

species_count = df['species'].value_counts()
count = species_count.tolist()
species_count.to_frame()

plt.pie(count, labels = unique_species, labeldistance = 1.15, wedgeprops = {'linewidth' : 5, 'edgecolor' : 'white'}, autopct = "%1.2f%%")
plt.title("Number of Species with their counts", fontsize = 14)
plt.show()

"""There are 50 values for each of the type of the flower.

# **Data Visualization**

# Graphs for each of the feature vs Species
"""

# Sepal Length vs Type
plt.bar(df['species'],df['sepal_width'], width = 0.5) 
plt.title("Sepal Length vs Type")
plt.show()

# Sepal Width vs Type
plt.bar(df['species'],df['sepal_width'], width = 0.5) 
plt.title("Sepal Width vs Type")
plt.show()

# Petal Length vs Type
plt.bar(df['species'],df['petal_length'], width = 0.5) 
plt.title("Petal Length vs Type")
plt.show()

# Petal Width vs Type
plt.bar(df['species'],df['petal_width'], width = 0.5) 
plt.title("Sepal Length vs Type")
plt.show()

"""Pair Plot for the dataset"""

pplot = sns.pairplot(df, hue =  'species', diag_kind = 'hist')
pplot.fig.suptitle("Relation of All Feature with each other", y = 1.05, fontsize = 16) 
plt.show()

"""# **Data Preparation**"""

from sklearn import preprocessing

X = df.iloc[:, 0:4]
X.head()

Y = df['species']
Y = Y.values
Y[0:5]

"""# Normalization of the Dataset"""

std = preprocessing.StandardScaler()
X = std.fit_transform(X)
X[0:4]

"""# **Splitting dataset into Train and Test sets**"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test =  train_test_split(X,Y, test_size = 0.3, random_state = 1)
print("x_train :" + str(x_train.shape))
print("x_test :" + str(x_test.shape))
print("y_train :" + str(y_train.shape))
print("y_test :" + str(y_test.shape))

"""# **Model Development using K Nearest Neighbors ( KNN ) Algorithm**

"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

"""# Finding best K value for the model"""

best_k = 0
best_acc = 0.0
acc_arr = np.zeros((9,))

for k in range(1,10):
    # model creation and prediction on X2
    knn_temp = KNeighborsClassifier(n_neighbors = k).fit(x_train, y_train)
    y2_result = knn_temp.predict(x_test)
    
    # calculating accuracy of model
    acc_score = accuracy_score(y_test, y2_result)
    acc_arr[k-1] = acc_score
    
    if acc_score > best_acc:
        best_k = k
        knn = knn_temp
        best_acc = acc_score
        
plt.plot(range(1,10),acc_arr)
plt.xlabel("Values of K")
plt.ylabel("Accuracy")
plt.show()

print("From above line plot, the model giving maximum accuracy for the K =",best_k)

"""# **Prediction using Classification Model**"""

knn = KNeighborsClassifier(n_neighbors = best_k)
knn.fit(x_train, y_train)
y_pred =  knn.predict(x_test)
y_pred

"""The above values are predicted by the created model.

# **Model Evaluation**
"""

acc =  accuracy_score(y_pred, y_test)
print("Accuracy of the created KNN model is " + str(acc*100) +"%")

cmat = confusion_matrix(y_test, y_pred)
values = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
cmat_eval = pd.DataFrame(cmat, columns = values, index = values)
cmat_eval

"""# **CONCLUSION :**
The accuracy of the classification model using K Nearest Neighbours ( KNN ) Algorithm is 97.7%.
"""